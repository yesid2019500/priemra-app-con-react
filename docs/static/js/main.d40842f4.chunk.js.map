{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","components/GitExportApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","console","log","categoriesT","type","value","onChange","target","placeholder","protoTypes","PropType","func","isRequired","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifts","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifts","este","es","el","operardor","express","GitExportApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAQaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAiC7C,OAMQ,aAFJ,CAEI,QAAMC,SA3BK,SAACC,GAChBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAE1BC,QAAQC,IAAI,kBAEZV,GAAc,SAAAW,GAAW,OAAKT,GAAL,mBAAoBS,OAC1CR,EAAc,MAiBlB,SAGA,uBAEAS,KAAK,OAELC,MAAOX,EAEPY,SA1CoB,SAACT,GAEzBF,EAAcE,EAAEU,OAAOF,QA0CnBG,YAAa,wBAUzBjB,EAAYkB,WAAa,CAErBjB,c,OAAekB,EAASC,KAAKC,Y,mCClEpBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIjBC,EAJiB,iDAI+BC,UAAWH,GAJ1C,gEAKCI,MAAMF,GALP,cAKjBG,EALiB,gBAMFA,EAAUC,OANR,uBAMhBC,EANgB,EAMhBA,KAGDC,EAAQD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAG7B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAIXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAOtCf,QAAQC,IAAIoB,GAzBW,kBA4BhBA,GA5BgB,4CAAH,sDCAPO,EAAe,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIhC,OAEI,cADA,CACA,OAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACtB,4BAAKA,QCDLO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECJV,SAACA,GAAa,MAObrB,mBAAS,CAE/B4B,KAAM,GACNa,SAAS,IAV0B,mBAOhCC,EAPgC,KAOzBC,EAPyB,KAyCvC,OA1BJC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAC,GACFC,YAAY,WAEXJ,EAAS,CACNf,KAAMkB,EACNL,SAAS,MAEN,UAIb,CAACpB,IAYQqB,EDhCsBM,CAAc3B,GAAjCa,EALyB,EAK9BN,KAAaa,EALiB,EAKjBA,QAMlB,OAJFjC,QAAQC,IAAIyB,EAAOO,GAKb,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAGZ,qBAAKA,UAAU,YAAf,SAWaH,EAAOJ,KAAI,SAAAC,GAAG,OAGX,aADA,CACC,EAAD,aAEKkB,MAAI,EAACC,IAAE,EAACC,IAAE,EAACC,WAAS,EAACC,SAAO,GACxBtB,GAFCA,EAAIC,aEsBvBsB,EA1De,WAAM,MAIKtD,mBAAS,CAAC,cAJf,mBAIxBuD,EAJwB,KAIZxD,EAJY,KAsBhC,OACI,gCAEA,6BAnBc,iBAqBd,cAAC,EAAD,CAAaA,cAAgBA,IAI7B,uBACA,uBACA,uBACC,uBAIA,6BAEOwD,EAAWzB,KAAI,SAAAT,GAAQ,OAKvB,aAHM,CAGL,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChD9BmC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d40842f4.chunk.js","sourcesContent":["// rafc este comando completa todo el comoonente\n\nimport React, { useState } from 'react';\nimport PropType from 'prop-types';\n\n\n\n\nexport const AddCategory = ({ setCategories}) => {\n\n    const [inputValue, setinputValue] = useState(''); //si no tiene nada dentro unse estate es undefinde\n    // pero con los '' es un string vacio, que es el que se esperaba\n\n    // vamos a extraer el valor del input\n    const cambiarEventoChange = (e) =>{\n        // console.log(e.target.value);\n        setinputValue(e.target.value);\n\n    }\n\n    const botonSumit = (e)=>{\n        e.preventDefault();\n\n        // estamos borrando los estpacios vacios con trim\n        // solo introducira de dos letras o numeros en adelante\n        if (inputValue.trim().length > 2) {\n\n             console.log('submit enviado')\n            //  aqui le estamos diciendo que inserte primero lo que mandamos\n             setCategories(categoriesT => [inputValue, ...categoriesT,]);\n                setinputValue('');\n            \n        }\n\n       \n\n    }\n\n    \n    // el inputvalue tiene el valor de useState\n\n    return (\n\n       \n     \n        // el onsumit es para quitar el comportamiento de envio del navegador\n        // en este caso le estamos mandando el (e)\n            <form onSubmit={ botonSumit }>\n            {/* este muestra en tiempo real lo que se esta escribiendo en el input */}\n            {/* <h1>{inputValue}</h1> */}\n            <input\n            \n            type=\"text\"\n\n            value={inputValue}\n            // el onchange se va ejecutar cada vez que la caja cambie\n            onChange={ cambiarEventoChange }\n\n            placeholder={'ingrese su texto'}\n            \n            />\n            </form>\n          \n      \n    )\n}\n\n\nAddCategory.protoTypes = {\n    // le estamos diciendo que  func es una funsion requeridad\n    setCategories: PropType.func.isRequired\n}","\n\n \n \nexport const getGifs = async (category) => {\n\n    // encodeuri es pÃ ra que los eapcios de la url los quite y los reemplaze por +\n    // le estamos mandando con caterory una peticion a la api\nconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit+=10&api_key=9pX5tYBGpOlebVv5nyGvlxS7U0Q6ikKd`;\nconst respuesta = await fetch(url)\nconst {data} = await respuesta.json();\n\n// vamos a hacer un recorrido por todo el json\nconst gifts = data.map(img =>{\n// estamos retornando un nuevo objecto, en este caso solo queremos el id\n// y los titulos\nreturn {\n    id: img.id,\n    title: img.title,\n    // le estamos diciendo con el signo de interrogacion que si vieien las \n    // imagenes lo utilize. esto nos devolvera unos objecto con el id y titulo y url\n    // el nombre downsized_medium, viene del json\n    url: img.images?.downsized_medium.url\n\n    }\n\n})\n\n// console.log(data);\nconsole.log(gifts);\n\n// el nuevo estado seran los gifs que estoy recibiendo\nreturn gifts;\n\n    }\n\n   ","\nimport React from 'react'\n\n\nexport const GiftGridItem = ({title,url}) => {\n\n    // console.log({id,title,url});\n\n    return (\n        // ahora vamos a imprimir el titulo y las imaneges\n        <div className=\"card animate__animated animate__fadeIn\">\n            {/* {img.title} */}\n            <img src={ url } alt={ title} />\n             <p>{ title }</p>\n        </div>\n    )\n}\n","\n// useefect permite ejecutar codigo de manera condicional\nimport React from 'react'\n\nimport { useFetchGifts } from '../hooks/useFetchGifts';\n\nimport { GiftGridItem } from '../components/GiftGridItem'\n\n\n\n// estamos recibiendo category del componente gitExportApp\n\nexport const GifGrid = ({category}) => {\n\n    // aqi vamnos a importar el custom hooks, lo almacenaremos en una variable\n    // y lo desestructuramos\n    // con los dos puntos estamos renombrando data\n  const {data:images, loading} = useFetchGifts(category);\n\n  console.log(images,loading);\n\n  \n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n        {/* si es true que muestre el loading, de lo contrario no muestre nada */}\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>  }\n        {/* condicional, cargando y de lo contrario */}\n        {/* {loading ? 'Cargando...' : 'Data cargada'} */}\n        <div className=\"card-grid\">\n           \n        \n           \n                {\n                    // estamos desestructurando el objecto\n                    // para pintar solo el titulo\n                    // images.map(({id,title}) =>(\n\n                    //     <li key={id}> { title} </li>\n\n                     images.map(img =>(\n\n                        // esta recibiendo las propiedades del id, url \n                        <GiftGridItem \n                             key={img.id}\n                             este es el operardor express\n                             {...img } \n                         />\n                                  \n                    ))\n                }\n        </div>\n        </>\n    )\n}\n","\n\n// este es un hooks, que como tal es una funsion\n\nimport { useEffect, useState } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n// en este caso la importancion de react no es importante\nexport const useFetchGifts = (category) => {\n   \n    // los custom hooks pueden tener un estado y pueden indicarle a otro componente\n    // que deben reemderizarse cuando algo cambio\n\n    // este cuando se utilise el useFetchGist, este estado va cargar por defecto\n\n    const [state, setstate] = useState({     //el estado inicial es un objectto\n\n        data: [],\n        loading: true,\n    });\n\n    \n\nuseEffect(()=>{\n// contiene una promesa\n    getGifs(category)\n    .then(imgs =>{\n        setTimeout( ()=>{\n            // console.log(imgs)\n         setstate({\n            data: imgs,\n            loading: false,\n        })\n             },100)\n       \n    })\n\n},[category])\n\n    // setTimeout(() => {\n    //     setstate(\n    //      {\n    //         data: [1,2,3,4,5,6,7],\n    //         loading: false,\n    //      }\n    //     )  \n        \n    // }, 3000);\n\n    return state; //este es un objecto que contiene el arreglo y el true\n\n}\n","\n\n\nimport React, { useState } from 'react';\nimport {AddCategory} from '../components/AddCategory';\nimport {GifGrid} from '../components/GifGrid';\n\n\n\n  export const GitExportApp = () => {\n\n    // const categories = ['One Punch','Samurai X','Dragon Ball'];\n\n    const  [categories, setCategories] = useState(['One Punch']);\n\n    const saludoGit = 'GitExportApp';\n\n    // const addElemento = ()=>{\n    //  setCategories([...categories, 'soy el nuevo']);\n\n    //  si queremos que aparezca de primero\n    //  setCategories(['soy el nuevo',...categories,]);\n\n\n    // esta seria otra solucion\n    // puede tener un callback donde categorieesT es el valor del estado anterior\n    // y luego retorna el nuevo estado\n    // setCategories(categoriesT =>  [...categoriesT,'soy el nuevo']);\n\n    // }\n\n    return ( \n        <div>\n\n        <h2>{saludoGit}</h2>\n        {/* le estamos pasando el setcategoryes a addCategory */}\n        <AddCategory setCategories={ setCategories } />\n\n        {/* aqui estamos llamando setCategories  desde los propTypes\n        <AddCategory  /> */}\n        <br></br>\n        <br></br>\n        <br></br>\n         <hr></hr>\n\n         {/* <button onClick={addElemento}>agregar</button> */}\n\n         <ol>\n            {\n                categories.map(category => (\n\n                      // este seria el retun, con las () estamos indicando que esta\n                    //   retornando un objecto\n                // <li key={category}> {category}</li>)\n                <GifGrid key={category} category={category} />\n                // los keys deben ser unicos\n\n                ))\n                \n            }\n\n         </ol>\n         \n        </div>\n     );\n}\n \nexport default GitExportApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExportApp from './components/GitExportApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GitExportApp />,\n  document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n// reportWebVitals();\n\n\n\n\n"],"sourceRoot":""}